<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:Util="SuperMap.Web.Util.*"
			   width="1161" height="728" minWidth="955" minHeight="600"
			   creationComplete="application1_creationCompleteHandler(event)">
	<fx:Script>
		<![CDATA[
			import SuperMap.Web.Core.Rectangle2D;
			import SuperMap.Web.Realspace.FlyManager;
			import SuperMap.Web.Realspace.FlyRoute;
			import SuperMap.Web.Realspace.FlyRoutes;
			import SuperMap.Web.Realspace.FlyStatus;
			import SuperMap.Web.Realspace.FlyingOperator;
			import SuperMap.Web.Realspace.Layer3D;
			import SuperMap.Web.UI.Controls.SceneControl;
			import SuperMap.Web.Util.CallBackEvent;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			private var sceneUrl:String="http://localhost:8090/iserver/services/components-rest/rest/realspace";
			private var sceneControl:SceneControl;
			private var scene:SuperMap.Web.Realspace.Scene;
			private var flyManager:FlyManager;
			private var flyRoutes:FlyRoutes;
			private var flyRoute:FlyRoute;
			private var routeLoaded:Boolean;
			[Bindable] 
			public var cards:ArrayCollection = new ArrayCollection( 
				[ {label:"鸟巢道路飞行路线", data:"http://localhost:8090/RealspaceSample/FlyRoutes.fpf"},  
					{label:"会议中心飞行路线", data:"http://localhost:8090/RealspaceSample/NewSceneRoutes.fpf"}]); 
			
			//程序初始化所有控件之后
			protected function application1_creationCompleteHandler(event:FlexEvent):void
			{
				//初始化三维场景控件实例
				sceneControl=new SceneControl(mySceneDiv,succeedCallBack,failedCallBack);
			}
			//控件初始化完成后的回调函数，初始化完成之后才能进行数据加载
			private function succeedCallBack(event:CallBackEvent):void
			{
				//获取Realspace控件的场景，控件和场景是一对一的捆绑关系
				scene=sceneControl.get_scene();
				//获取FlyManager对象
				flyManager = scene.get_flyManager();
				//打开场景
				scene.open(sceneUrl,"scene_olympicgreen");
				//获取场景中的第一个图层
				var layer3D:Layer3D = scene.get_layer3Ds().get_item(0);
				if (layer3D != null) {
					//获取图层的地理范围，并飞行到该范围
					var geobound:Rectangle2D = layer3D.get_bounds();
					scene.get_flyingOperator().flyToBounds(geobound);
				}
			}
			//控件初始化失败后的回调函数
			private function failedCallBack(event:CallBackEvent):void
			{
				trace("Realspace initialized failed!");
			}
			
			//根据飞行路径获取相应的基础信息
			protected function setFilePath(event:MouseEvent):void
			{
				if(flyManager!=null)
				{
					if(flyManager.get_flyStatus()==FlyStatus.FSTOP)
					{
						//获取飞行路线
						flyRoutes=flyManager.get_routes();
						if(flyRoutes!=null)
						{
							//获取飞行路线地址
							var filePath:String= comboBoxFilePath.selectedItem.data as String;
							//导入路线，并且判定是否成功
							if(flyRoutes.fromFile(filePath)==false)
							{
								return;
							}
							flyRoute=flyRoutes.get_currentRoute();
							//读取飞行路线的信息并初始化界面初始值
							textInputSpeed.text=flyRoute.get_speed().toString();
							textInputTime.text=flyManager.get_duration().toString();
							checkBoxAltitudeFixed.selected=flyRoute.get_isAltitudeFixed();
							checkBoxHeadingFixed.selected=flyRoute.get_isHeadingFixed();
							checkBoxTiltFixed.selected=flyRoute.get_isTiltFixed();
							checkBoxFlyingLoop.selected=flyRoute.get_isFlyingLoop();
							checkBoxFlyAlongTheRoute.selected=flyRoute.get_isFlyAlongTheRoute();
							checkBoxLinesVisible.selected=flyRoute.get_isLinesVisible();
							checkBoxStopsVisible.selected=flyRoute.get_isStopsVisible();
							routeLoaded=true;
						}
					}
				}
				else
				{
					return;
				}
			}
			//开始飞行
			protected function play(event:MouseEvent):void
			{
				if(routeLoaded)
				{
					//重新获取速度和时长
					textInputSpeed.text=flyRoute.get_speed().toString();
					textInputTime.text=flyManager.get_duration().toString();
					if (flyManager == null && flyRoutes == null &&	flyManager.get_flyStatus() == SuperMap.Web.Realspace.FlyStatus.FPLAY)
					{
						return;
					}
					else
					{
						scene.set_type(SuperMap.Web.Realspace.SceneType.Flat);
						flyManager.play();
					}
				}
			}
			//暂停飞行
			protected function pause(event:MouseEvent):void
			{
				if (flyManager == null)
				{
					return;
				}
				flyManager.pause();
			}
			//停止飞行
			protected function stop(event:MouseEvent):void
			{
				if (flyManager == null)
				{
					return;
				}
				flyManager.stop();
			}
			//设置速度
			protected function resetSpeed(event:MouseEvent):void
			{
				if (routeLoaded) {
					//设置速度
					flyRoute.set_speed(parseFloat(textInputSpeed.text));
					//获取当前飞行需要的时间
					textInputTime.text=flyManager.get_duration().toString();
				}
			}
			//设置时间
			protected function resetTime(event:MouseEvent):void
			{
				if (routeLoaded) {
					//设置时间
					flyManager.set_duration(parseFloat(textInputTime.text));
					//获取当前飞行需要的速度
					textInputSpeed.text=flyRoute.get_speed().toString();
				}
			}
			//设置速率，飞行过程中可以通过设置速率来控制飞行的快慢
			protected function resetRate(event:MouseEvent):void
			{
				if (routeLoaded)
				{
					//设置速率
					flyManager.set_playRate(parseFloat(textInputRate.text));
				}
			}
			
			//是否锁定高度
			protected function resetAltitudeFixed(event:Event):void
			{
				flyRoute.set_isAltitudeFixed((event.target as CheckBox).selected);
			}
			//是否锁定方位角
			protected function resetHeadingFixed(event:Event):void
			{
				flyRoute.set_isHeadingFixed((event.target as CheckBox).selected);
			}
			//是否锁定倾斜角
			protected function resetTiltFixed(event:Event):void
			{
				flyRoute.set_isTiltFixed((event.target as CheckBox).selected);
			}
			//是否循环飞行
			protected function resetFlyingLoop(event:Event):void
			{
				flyRoute.set_isFlyingLoop((event.target as CheckBox).selected);
			}
			//是否沿线飞行
			protected function resetFlyAlongTheRoute(event:Event):void
			{
				flyRoute.set_isFlyAlongTheRoute((event.target as CheckBox).selected);
			}
			//是否设置线路可见
			protected function resetLinesVisible(event:Event):void
			{
				flyRoute.set_isLinesVisible((event.target as CheckBox).selected);
			}
			//是否设置站点可见
			protected function resetStopsVisible(event:Event):void
			{
				flyRoute.set_isStopsVisible((event.target as CheckBox).selected);
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<Util:SceneDiv id="mySceneDiv" x="242" y="10" width="909" height="708">
	</Util:SceneDiv>
	<s:Label x="10" y="26"  text="飞行路线："/>
	<s:ComboBox id="comboBoxFilePath" dataProvider="{cards}" selectedIndex="0" x="10" y="47"/>
	<s:Button x="164" y="47" label="设置" click="setFilePath(event)"/>
	<s:Label x="10" y="78" text="速度（千米/小时）："/>
	<s:TextInput id="textInputSpeed" x="10" y="98" width="146"/>
	<s:Button id="buttonSpeed" x="164" y="98" label="设置" click="resetSpeed(event)"/>
	<s:Label x="10" y="128" text="时长（秒）："/>
	<s:TextInput id="textInputTime" x="10" y="148" width="146"/>
	<s:Button id="buttonTime" x="164" y="148" label="设置" click="resetTime(event)"/>
	<s:Label x="10" y="178" text="当前速率设置（0-100）："/>
	<s:TextInput id="textInputRate" x="10" y="198" width="146"/>
	<s:Button id="buttonRate" x="164" y="198" label="设置" click="resetRate(event)"/>
	<s:CheckBox id="checkBoxAltitudeFixed" x="10" y="242" width="146" label="高度锁定" change="resetAltitudeFixed(event)"/>
	<s:CheckBox id="checkBoxHeadingFixed" x="10" y="268" width="146" label="方位角锁定" change="resetHeadingFixed(event)"/>
	<s:CheckBox id="checkBoxTiltFixed" x="10" y="294" width="146" label="倾斜角锁定" change="resetTiltFixed(event)"/>
	<s:CheckBox id="checkBoxFlyingLoop" x="10" y="320" width="146" label="循环飞行" change="resetFlyingLoop(event)"/>
	<s:CheckBox id="checkBoxFlyAlongTheRoute" x="10" y="346" width="146" label="沿线飞行" change="resetFlyAlongTheRoute(event)"/>
	<s:CheckBox id="checkBoxLinesVisible" x="10" y="372" width="146" label="显示路线" change="resetLinesVisible(event)"/>
	<s:CheckBox id="checkBoxStopsVisible" x="10" y="398" width="146" label="显示站点" change="resetStopsVisible(event)"/>
	<s:Button id="buttonPlay" x="9" y="440" label="开始" click="play(event)"/>
	<s:Button id="buttonPause" x="86" y="440" label="暂停" click="pause(event)"/>
	<s:Button id="buttonStop" x="164" y="440" label="停止" click="stop(event)"/>
	<s:Label x="10" y="469" text="备注：当沿线飞行时根据需要想"/>
	<s:Label x="10" y="489" text="加快或者减慢飞行速度时,可通过"/>
	<s:Label x="10" y="509" text="当前速率设置（即当前速度的几"/>
	<s:Label x="10" y="529" text="倍），速率取值为【0-100】当速"/>
	<s:Label x="10" y="549" text="率小于1时是减速，大于1时是加"/>
	<s:Label x="10" y="569" text="速。"/>
</s:Application>
